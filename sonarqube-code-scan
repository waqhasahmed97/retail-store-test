pipeline {
    agent any

    environment {
        // SonarQube parameters
        SONARQUBE_SERVER = 'SonarQube'       // Name of SonarQube server as configured in Jenkins
        SCANNER_HOME = tool 'SonarScanner'   // Name of the SonarQube scanner tool configured in Jenkins
        SONAR_PROJECT_KEY = 'your-project-key'  // Replace with your SonarQube project key
        SONAR_PROJECT_NAME = 'your-project-name'  // Replace with your SonarQube project name
        SONAR_PROJECT_VERSION = '1.0'        // Version of the project
        SONAR_SOURCES = '.'                  // The directory to scan, '.' means current directory
        GITHUB_REPO = 'https://github.com/yourusername/your-repo'  // GitHub repo URL
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "Checking out code from ${GITHUB_REPO}"
                git branch: 'main', url: "${GITHUB_REPO}"
            }
        }

        stage('SonarQube Scan') {
            steps {
                script {
                    echo "Running SonarQube scan"
                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                        -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                        -Dsonar.sources=${SONAR_SOURCES} \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    // Wait for SonarQube quality gate result
                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'SonarQube scan completed successfully.'
        }
        failure {
            echo 'SonarQube scan failed.'
        }
    }
}
